#include<iostream>
using namespace std;
int A[100];
int find_max_crossing_subarray(int low,int mid,int high)
{
	int left_sum=-9999999;
	int sum=0;
	int max_left,max_right;
	for(int i=mid;i>=low;i--)
	{
		sum=sum+A[i];
		if(sum>left_sum)
		{
			left_sum=sum;
			max_left=i;
		}
	}
	int right_sum=-9999999;
	sum=0;
	for(int j=mid+1;j<=high;j++)
	{
		sum=sum+A[j];
		if(sum>right_sum)
		{
			right_sum=sum;
			max_right=j;
		}
	}
	cout<<"crossing:    "<<"low="<<low<<"    high="<<high<<' '<<left_sum+right_sum<<endl;
	return (max_left,max_right,left_sum+right_sum);
}
int find_maximum_subarray(int low,int high)
{
	cout<<"low="<<low<<' '<<"high="<<high<<endl;
	if(high==low)
	   return (low,high,A[low]);
	int mid=(low+high)/2;
	int left_low,left_high,left_sum,right_low,
	right_high,right_sum,cross_low,cross_high,cross_sum;
	cout<<'1'<<endl;
	(left_low,left_high,left_sum)=find_maximum_subarray(low,mid);
	cout<<"2"<<endl;
	(right_low,right_high,right_sum)=find_maximum_subarray(1+mid,high);
	cout<<"3"<<endl;
	(cross_low,cross_high,cross_sum)=find_max_crossing_subarray(low,mid,high);
	if(left_sum>right_sum&&left_sum>=cross_sum)
	return (left_low,left-high,left_sum);
	else if(right_sum>=left_sum&&right_sum>=cross_sum)
	return (right_low,right_high,right_sum);
	else
	return(cross_low,cross_high,cross_sum);
}
int main()
{
	int n;
	while(cin>>n)
	{
		for(int i=0;i<n;i++)
		{
			cin>>A[i];
		}
		int i,j,sum;
		(i,j,sum)=find_maximum_subarray(0,n-1);
		cout<<i<<' '<<j<<' '<<sum<<endl;
	}
}
